---
- name: Discover the SAP application on endpoints
  win_shell: |
    $sap_srv=get-service |?{$_.Name -like '*SAP???_??*'} | Select Name,Displayname | ConvertTo-Json
    $sap_srv
  register: sap_app

- name: Display SAP installed on the server
  debug:
    msg: "SAP Application are installed on the endpoint"
  when: sap_app.stdout is search('SAP')

- name: Display No SAP application /instances installed on endpoints
  debug:
    msg: "No SAP Application are installed in the server"
  when: sap_app.stdout | length == 0

- name: set facts for SAP service array
  set_fact:
    sap: "{{ sap_app.stdout | from_json|json_query (\"[?contains(DisplayName, 'SAP')]\") }}"
  when: sap_app.stdout is search('SAP')

- name: SAP Stop task executing block
  block:
    - name: Get the SID
      win_shell: |
        $Service=get-wmiobject win32_service |?{$_.Name -like '*SAP???_??*' -and $_.pathname -match 'D00|DVE|SCS' -and $_.state -eq "Running"}
        $sub_service=(($service.Name).Substring(3)).split("_")
        $sub_service[0]
      register: sid
      ignore_errors: true

    # - name: Get the SID
    #   win_shell: |
    #     $service=get-wmiobject win32_service |?{$_.Name -like '*SAP???_??*'}
    #     $sub_service=(($service.Name).Substring(3)).split("_")
    #     $final_sid=$sub_service[0,2,4,6,8,10,12,14,16,18,20] |Get-Unique
    #     $final_sid|%{($_).trim('`r`n')}
    #   register: sid

    # - name: Dispaly the SIDadm user details
    #   debug:
    #     msg: "{{ item }}adm"
    #   with_items: "{{ sid.stdout_lines | trim |lower }}"

    - name: Dispaly the SIDadm user details
      debug:
        msg: "{{ sid.stdout | trim |lower }}adm"

    - name: Set facts sid adm as variables to become as sidam when stop SAP
      set_fact:
        sid_adm: "{{ sid.stdout | trim |lower }}adm"

    - name: Copy SAP_Stop Powershell script to endpoints
      win_copy:
        src: files/stop_sap.ps1
        dest: c:\temp\

    - name: SAP Stop by executing Stop_Sap.ps1 script with become SIDadm:{{ sid_adm }}
      win_shell: .\stop_sap.ps1
      args:
        chdir: c:\temp
      become: yes
      become_method: runas
      become_user: "{{ sid_adm }}"
      register: sap_stop
      failed_when: >
        ("STOPSAP executed succesfully" not in sap_stop.stdout) or
        ("failed" in sap_stop.stdout)

    - name: Display the message to admin, if the SAP stop failed
      debug:
        msg: " The SAP appliction is not stopped, hence callout SAP team to stop the SAP & DB and proceed further manual patching"
      when: sap_stop.failed_when_result == 'true'

    - name: Display the SAP system stop Status message
      debug:
        msg: "{{ sap_stop.stdout_lines }}"

    - name: Copy SAP satus script to endpoint to know the SAP stop status
      win_copy:
        src: files/status_sap.ps1
        dest: c:\temp\

    - name: Execute the SAP Status script to know the sapcontrol.exe GetProcessList
      win_shell: .\status_sap.ps1
      args:
        chdir: c:\temp
      become: yes
      become_method: runas
      become_user: "{{ sid_adm }}"
      register: sap_stop_status

    - name: Display the sapcontrol.exe GetProcessList status message
      debug:
        msg: "{{ sap_stop_status.stdout_lines }}"

    # - name: Get SAP service status before stop
    #   win_shell: |
    #     get-service |?{$_.Name -like '*SAP???_??*'} |select Name,DisplayName,Status,StartType
    #   register: sap_service_status_before

    # - name: Display the SAP service status before stop
    #   debug:
    #     msg: "{{ sap_service_status_before.stdout_lines }}"

    # - name: Stop the SAP services
    #   win_shell: |
    #     get-wmiobject win32_service |?{$_.Name -like '*SAP???_??*'} | stop-service
    #   register: sap_service_stop_status

    - name: Stop SAP services
      win_service:
        name: "{{ item.Name }}"
        state: stopped
        force_dependent_services: yes
      ignore_errors: yes
      with_items: "{{ sap }}"
      register: sap_service_stop_status

    - name: Get SAP service status after stop
      win_shell: |
        get-service |?{$_.Name -like '*SAP???_??*'} |select DisplayName,Status,StartType
      register: sap_service_status_after
      when: sap_service_stop_status is changed

    - name: Display the SAP service status after stop
      debug:
        msg: "{{ sap_service_status_after.stdout_lines }}"
      when: sap_service_stop_status is changed

    - name: Get the SAP Processes to know whether any SAP processes are running state
      win_shell: |
        Get-Process |select name |findstr /C:"disp" /C:"sap"
      register: sap_process_status

    - name: Display the SAP processes status
      debug:
        msg: "{{ sap_process_status.stdout_lines }}"

    - name: Delete the SAP stop and status powershell scripts
      win_file:
        path: C:\Temp\{{ item }}
        state: absent
      with_items:
        - stop_sap.ps1
        - status_sap.ps1
      become: yes
      become_method: runas
      become_user: system

  when: sap_app.stdout is search('SAP')

  # rescue:
  #   - name: Error message when the block having failed task
  #     debug:
  #       msg:
  #         - "Error while stopping the SAP application, hence required manual interventions please call out to SAP team to stop the SAP manually"
  #   - name: Pause the exeution for 15 minutes, manual action to stop SAP application by SAP team
  #     pause:
  #       minutes: 15
